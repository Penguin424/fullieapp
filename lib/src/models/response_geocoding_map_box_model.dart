///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class ResponseGeocodingMapBoxModelFeaturesContext {
/*
{
  "id": "postcode.13124905784880770",
  "text": "45085"
} 
*/

  String? id;
  String? text;

  ResponseGeocodingMapBoxModelFeaturesContext({
    this.id,
    this.text,
  });
  ResponseGeocodingMapBoxModelFeaturesContext.fromJson(
      Map<String, dynamic> json) {
    id = json['id']?.toString();
    text = json['text']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['text'] = text;
    return data;
  }
}

class ResponseGeocodingMapBoxModelFeaturesGeometry {
/*
{
  "type": "Point",
  "coordinates": [
    -103.40059
  ]
} 
*/

  String? type;
  List<double?>? coordinates;

  ResponseGeocodingMapBoxModelFeaturesGeometry({
    this.type,
    this.coordinates,
  });
  ResponseGeocodingMapBoxModelFeaturesGeometry.fromJson(
      Map<String, dynamic> json) {
    type = json['type']?.toString();
    if (json['coordinates'] != null) {
      final v = json['coordinates'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      coordinates = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    if (coordinates != null) {
      final v = coordinates;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['coordinates'] = arr0;
    }
    return data;
  }
}

class ResponseGeocodingMapBoxModelFeaturesProperties {
/*
{
  "accuracy": "point"
} 
*/

  String? accuracy;

  ResponseGeocodingMapBoxModelFeaturesProperties({
    this.accuracy,
  });
  ResponseGeocodingMapBoxModelFeaturesProperties.fromJson(
      Map<String, dynamic> json) {
    accuracy = json['accuracy']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['accuracy'] = accuracy;
    return data;
  }
}

class ResponseGeocodingMapBoxModelFeatures {
/*
{
  "id": "address.1907259121",
  "type": "Feature",
  "place_type": [
    "address"
  ],
  "relevance": 1,
  "properties": {
    "accuracy": "point"
  },
  "text": "Tabachines",
  "place_name": "Tabachines 4199, 45085 Zapopan, Jalisco, Mexico",
  "center": [
    -103.40059
  ],
  "geometry": {
    "type": "Point",
    "coordinates": [
      -103.40059
    ]
  },
  "address": "4199",
  "context": [
    {
      "id": "postcode.13124905784880770",
      "text": "45085"
    }
  ]
} 
*/

  String? id;
  String? type;
  List<String?>? placeType;
  int? relevance;
  ResponseGeocodingMapBoxModelFeaturesProperties? properties;
  String? text;
  String? placeName;
  List<double?>? center;
  ResponseGeocodingMapBoxModelFeaturesGeometry? geometry;
  String? address;
  List<ResponseGeocodingMapBoxModelFeaturesContext?>? context;

  ResponseGeocodingMapBoxModelFeatures({
    this.id,
    this.type,
    this.placeType,
    this.relevance,
    this.properties,
    this.text,
    this.placeName,
    this.center,
    this.geometry,
    this.address,
    this.context,
  });
  ResponseGeocodingMapBoxModelFeatures.fromJson(Map<String, dynamic> json) {
    id = json['id']?.toString();
    type = json['type']?.toString();
    if (json['place_type'] != null) {
      final v = json['place_type'];
      final arr0 = <String>[];
      v.forEach((v) {
        arr0.add(v.toString());
      });
      placeType = arr0;
    }
    relevance = json['relevance']?.toInt();
    properties = (json['properties'] != null)
        ? ResponseGeocodingMapBoxModelFeaturesProperties.fromJson(
            json['properties'])
        : null;
    text = json['text']?.toString();
    placeName = json['place_name']?.toString();
    if (json['center'] != null) {
      final v = json['center'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      center = arr0;
    }
    geometry = (json['geometry'] != null)
        ? ResponseGeocodingMapBoxModelFeaturesGeometry.fromJson(
            json['geometry'])
        : null;
    address = json['address']?.toString();
    if (json['context'] != null) {
      final v = json['context'];
      final arr0 = <ResponseGeocodingMapBoxModelFeaturesContext>[];
      v.forEach((v) {
        arr0.add(ResponseGeocodingMapBoxModelFeaturesContext.fromJson(v));
      });
      context = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['id'] = id;
    data['type'] = type;
    if (placeType != null) {
      final v = placeType;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['place_type'] = arr0;
    }
    data['relevance'] = relevance;
    if (properties != null) {
      data['properties'] = properties!.toJson();
    }
    data['text'] = text;
    data['place_name'] = placeName;
    if (center != null) {
      final v = center;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['center'] = arr0;
    }
    if (geometry != null) {
      data['geometry'] = geometry!.toJson();
    }
    data['address'] = address;
    if (context != null) {
      final v = context;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['context'] = arr0;
    }
    return data;
  }
}

class ResponseGeocodingMapBoxModel {
/*
{
  "type": "FeatureCollection",
  "query": [
    -103.40075978950453
  ],
  "features": [
    {
      "id": "address.1907259121",
      "type": "Feature",
      "place_type": [
        "address"
      ],
      "relevance": 1,
      "properties": {
        "accuracy": "point"
      },
      "text": "Tabachines",
      "place_name": "Tabachines 4199, 45085 Zapopan, Jalisco, Mexico",
      "center": [
        -103.40059
      ],
      "geometry": {
        "type": "Point",
        "coordinates": [
          -103.40059
        ]
      },
      "address": "4199",
      "context": [
        {
          "id": "postcode.13124905784880770",
          "text": "45085"
        }
      ]
    }
  ],
  "attribution": "NOTICE: Â© 2022 Mapbox and its suppliers. All rights reserved. Use of this data is subject to the Mapbox Terms of Service (https://www.mapbox.com/about/maps/). This response and the information it contains may not be retained. POI(s) provided by Foursquare."
} 
*/

  String? type;
  List<double?>? query;
  List<ResponseGeocodingMapBoxModelFeatures?>? features;
  String? attribution;

  ResponseGeocodingMapBoxModel({
    this.type,
    this.query,
    this.features,
    this.attribution,
  });
  ResponseGeocodingMapBoxModel.fromJson(Map<String, dynamic> json) {
    type = json['type']?.toString();
    if (json['query'] != null) {
      final v = json['query'];
      final arr0 = <double>[];
      v.forEach((v) {
        arr0.add(v.toDouble());
      });
      query = arr0;
    }
    if (json['features'] != null) {
      final v = json['features'];
      final arr0 = <ResponseGeocodingMapBoxModelFeatures>[];
      v.forEach((v) {
        arr0.add(ResponseGeocodingMapBoxModelFeatures.fromJson(v));
      });
      features = arr0;
    }
    attribution = json['attribution']?.toString();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['type'] = type;
    if (query != null) {
      final v = query;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v);
      }
      data['query'] = arr0;
    }
    if (features != null) {
      final v = features;
      final arr0 = [];
      for (var v in v!) {
        arr0.add(v!.toJson());
      }
      data['features'] = arr0;
    }
    data['attribution'] = attribution;
    return data;
  }
}
